{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_20-ebe0db3ede912ec193f2b1453edac552abfdc39e",
  "solcVersion": "0.8.20",
  "solcLongVersion": "0.8.20+commit.a1b79de6",
  "userSourceNameMap": {
    "contracts/CampusCreditV2.sol": "project/contracts/CampusCreditV2.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "paris",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/CampusCreditV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @title AgriSensorData\n * @dev Immutable storage of IoT sensor data with role-based access control.\n * Features:\n * - Sensor readings stored permanently on-chain\n * - Role-based permissions for devices, farmers, researchers\n * - Batch submissions for IoT gateways\n * - Query functions for historical data\n * - Crop lifecycle tracking\n * - Supply chain traceability\n */\ncontract AgriSensorData is AccessControl {\n    // Role definitions\n    bytes32 public constant DEVICE_ROLE = keccak256(\"DEVICE_ROLE\");\n    bytes32 public constant FARMER_ROLE = keccak256(\"FARMER_ROLE\");\n    bytes32 public constant SUPPLY_CHAIN_ROLE = keccak256(\"SUPPLY_CHAIN_ROLE\");\n    bytes32 public constant RESEARCHER_ROLE = keccak256(\"RESEARCHER_ROLE\");\n\n    // Custom errors\n    error UnauthorizedDevice();\n    error InvalidSensorData();\n    error ArrayLengthMismatch();\n    error DuplicateDataHash();\n    error ReadingNotFound();\n\n    // Sensor reading structure\n    struct SensorReading {\n        uint256 timestamp;\n        address deviceId;\n        uint256 farmId;\n        int16 temperature;      // in 0.1°C (e.g., 255 = 25.5°C)\n        uint16 soilMoisture;    // percentage 0-1000 (0.1% precision)\n        uint16 humidity;        // percentage 0-1000 (0.1% precision)\n        bytes32 dataHash;       // for verification\n    }\n\n    // Crop lifecycle event structure\n    struct CropEvent {\n        uint256 farmId;\n        string eventType;       // \"SEED\", \"FERTILIZE\", \"IRRIGATE\", \"HARVEST\"\n        uint256 timestamp;\n        string notes;\n        bytes32 linkedDataHash; // optional link to sensor data\n    }\n\n    // Supply chain stage structure\n    struct SupplyChainStage {\n        uint256 productId;\n        string stage;           // \"FARM\", \"TRANSPORT\", \"STORAGE\", \"RETAIL\"\n        uint256 timestamp;\n        address recorder;\n        string location;\n        bytes32 linkedDataHash; // link to sensor data (e.g., transport temp)\n    }\n\n    // Storage\n    SensorReading[] public readings;\n    CropEvent[] public cropEvents;\n    SupplyChainStage[] public supplyChainStages;\n\n    mapping(bytes32 => bool) public dataHashes;             // prevent duplicate submissions\n    mapping(uint256 => uint256[]) public farmToReadings;    // farmId => reading indices\n    mapping(uint256 => uint256[]) public farmToCropEvents;  // farmId => crop event indices\n    mapping(uint256 => uint256[]) public productToStages;   // productId => supply chain indices\n\n    // Events\n    event SensorDataSubmitted(\n        uint256 indexed readingId,\n        address indexed deviceId,\n        uint256 indexed farmId,\n        uint256 timestamp\n    );\n\n    event CropEventRecorded(\n        uint256 indexed eventId,\n        uint256 indexed farmId,\n        string eventType,\n        uint256 timestamp\n    );\n\n    event SupplyChainStageRecorded(\n        uint256 indexed stageId,\n        uint256 indexed productId,\n        string stage,\n        uint256 timestamp\n    );\n\n    event AnomalyDetected(\n        uint256 indexed readingId,\n        address indexed deviceId,\n        string anomalyType\n    );\n\n    /**\n     * @dev Constructor grants admin role to deployer\n     */\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(DEVICE_ROLE, msg.sender);\n        _grantRole(FARMER_ROLE, msg.sender);\n        _grantRole(RESEARCHER_ROLE, msg.sender);\n        _grantRole(SUPPLY_CHAIN_ROLE, msg.sender);\n    }\n\n    /**\n     * @dev Submit a single sensor reading\n     * @param farmId The farm identifier\n     * @param temperature Temperature in 0.1°C\n     * @param soilMoisture Soil moisture 0-1000 (0.1% precision)\n     * @param humidity Humidity 0-1000 (0.1% precision)\n     */\n    function submitSensorData(\n        uint256 farmId,\n        int16 temperature,\n        uint16 soilMoisture,\n        uint16 humidity\n    ) external onlyRole(DEVICE_ROLE) {\n        // Validate data ranges\n        if (soilMoisture > 1000 || humidity > 1000) revert InvalidSensorData();\n\n        // Compute hash for verification\n        bytes32 hash = keccak256(abi.encodePacked(\n            block.timestamp,\n            msg.sender,\n            farmId,\n            temperature,\n            soilMoisture,\n            humidity\n        ));\n\n        // Check for duplicates\n        if (dataHashes[hash]) revert DuplicateDataHash();\n        dataHashes[hash] = true;\n\n        // Store reading\n        uint256 readingId = readings.length;\n        readings.push(SensorReading({\n            timestamp: block.timestamp,\n            deviceId: msg.sender,\n            farmId: farmId,\n            temperature: temperature,\n            soilMoisture: soilMoisture,\n            humidity: humidity,\n            dataHash: hash\n        }));\n\n        farmToReadings[farmId].push(readingId);\n\n        emit SensorDataSubmitted(readingId, msg.sender, farmId, block.timestamp);\n\n        // Basic anomaly detection\n        _checkAnomalies(readingId, temperature, soilMoisture, humidity);\n    }\n\n    /**\n     * @dev Submit batch sensor readings (for IoT gateways)\n     * @param farmIds Array of farm identifiers\n     * @param temperatures Array of temperatures\n     * @param moistures Array of soil moisture values\n     * @param humidities Array of humidity values\n     */\n    function submitBatch(\n        uint256[] calldata farmIds,\n        int16[] calldata temperatures,\n        uint16[] calldata moistures,\n        uint16[] calldata humidities\n    ) external onlyRole(DEVICE_ROLE) {\n        uint256 len = farmIds.length;\n        if (len != temperatures.length || len != moistures.length || len != humidities.length) {\n            revert ArrayLengthMismatch();\n        }\n\n        for (uint256 i = 0; i < len; ) {\n            if (moistures[i] > 1000 || humidities[i] > 1000) revert InvalidSensorData();\n\n            bytes32 hash = keccak256(abi.encodePacked(\n                block.timestamp,\n                msg.sender,\n                farmIds[i],\n                temperatures[i],\n                moistures[i],\n                humidities[i],\n                i // include index to prevent duplicate hashes in same batch\n            ));\n\n            if (dataHashes[hash]) revert DuplicateDataHash();\n            dataHashes[hash] = true;\n\n            uint256 readingId = readings.length;\n            readings.push(SensorReading({\n                timestamp: block.timestamp,\n                deviceId: msg.sender,\n                farmId: farmIds[i],\n                temperature: temperatures[i],\n                soilMoisture: moistures[i],\n                humidity: humidities[i],\n                dataHash: hash\n            }));\n\n            farmToReadings[farmIds[i]].push(readingId);\n\n            emit SensorDataSubmitted(readingId, msg.sender, farmIds[i], block.timestamp);\n\n            _checkAnomalies(readingId, temperatures[i], moistures[i], humidities[i]);\n\n            unchecked { ++i; }\n        }\n    }\n\n    /**\n     * @dev Record a crop lifecycle event\n     * @param farmId The farm identifier\n     * @param eventType Type of event (SEED, FERTILIZE, etc.)\n     * @param notes Additional notes\n     * @param linkedDataHash Optional hash linking to sensor data\n     */\n    function recordCropEvent(\n        uint256 farmId,\n        string calldata eventType,\n        string calldata notes,\n        bytes32 linkedDataHash\n    ) external onlyRole(FARMER_ROLE) {\n        uint256 eventId = cropEvents.length;\n        cropEvents.push(CropEvent({\n            farmId: farmId,\n            eventType: eventType,\n            timestamp: block.timestamp,\n            notes: notes,\n            linkedDataHash: linkedDataHash\n        }));\n\n        farmToCropEvents[farmId].push(eventId);\n\n        emit CropEventRecorded(eventId, farmId, eventType, block.timestamp);\n    }\n\n    /**\n     * @dev Record a supply chain stage\n     * @param productId Unique product identifier\n     * @param stage Stage name (FARM, TRANSPORT, STORAGE, RETAIL)\n     * @param location Location description\n     * @param linkedDataHash Optional hash linking to sensor data\n     */\n    function recordSupplyChainStage(\n        uint256 productId,\n        string calldata stage,\n        string calldata location,\n        bytes32 linkedDataHash\n    ) external onlyRole(SUPPLY_CHAIN_ROLE) {\n        uint256 stageId = supplyChainStages.length;\n        supplyChainStages.push(SupplyChainStage({\n            productId: productId,\n            stage: stage,\n            timestamp: block.timestamp,\n            recorder: msg.sender,\n            location: location,\n            linkedDataHash: linkedDataHash\n        }));\n\n        productToStages[productId].push(stageId);\n\n        emit SupplyChainStageRecorded(stageId, productId, stage, block.timestamp);\n    }\n\n    /**\n     * @dev Get all sensor readings for a farm\n     * @param farmId The farm identifier\n     * @return Array of reading indices\n     */\n    function getReadingsByFarm(uint256 farmId) external view returns (uint256[] memory) {\n        return farmToReadings[farmId];\n    }\n\n    /**\n     * @dev Get crop events for a farm\n     * @param farmId The farm identifier\n     * @return Array of event indices\n     */\n    function getCropEventsByFarm(uint256 farmId) external view returns (uint256[] memory) {\n        return farmToCropEvents[farmId];\n    }\n\n    /**\n     * @dev Get supply chain stages for a product\n     * @param productId The product identifier\n     * @return Array of stage indices\n     */\n    function getSupplyChainStages(uint256 productId) external view returns (uint256[] memory) {\n        return productToStages[productId];\n    }\n\n    /**\n     * @dev Get total number of readings\n     */\n    function getTotalReadings() external view returns (uint256) {\n        return readings.length;\n    }\n\n    /**\n     * @dev Get total number of crop events\n     */\n    function getTotalCropEvents() external view returns (uint256) {\n        return cropEvents.length;\n    }\n\n    /**\n     * @dev Get total number of supply chain stages\n     */\n    function getTotalSupplyChainStages() external view returns (uint256) {\n        return supplyChainStages.length;\n    }\n\n    /**\n     * @dev Verify a sensor reading's integrity\n     * @param readingId The reading index\n     * @return valid Whether the hash matches\n     * @return storedHash The stored hash\n     */\n    function verifyReading(uint256 readingId) \n        external \n        view \n        returns (bool valid, bytes32 storedHash) \n    {\n        if (readingId >= readings.length) revert ReadingNotFound();\n        \n        SensorReading memory reading = readings[readingId];\n        storedHash = reading.dataHash;\n        \n        // Note: Can't recompute exact hash without original index for batch submissions\n        // This is a simplified verification\n        valid = dataHashes[storedHash];\n    }\n\n    /**\n     * @dev Internal function for basic anomaly detection\n     */\n    function _checkAnomalies(\n        uint256 readingId,\n        int16 temperature,\n        uint16 soilMoisture,\n        uint16 humidity\n    ) internal {\n        // Example thresholds (configurable in production)\n        if (temperature < -100 || temperature > 600) { // -10°C to 60°C\n            emit AnomalyDetected(readingId, msg.sender, \"EXTREME_TEMPERATURE\");\n        }\n        if (soilMoisture < 50 || soilMoisture > 950) {\n            emit AnomalyDetected(readingId, msg.sender, \"EXTREME_SOIL_MOISTURE\");\n        }\n        if (humidity > 950) {\n            emit AnomalyDetected(readingId, msg.sender, \"EXTREME_HUMIDITY\");\n        }\n    }\n}\n"
      }
    }
  }
}